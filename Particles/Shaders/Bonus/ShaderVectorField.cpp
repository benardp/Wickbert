// @file ShaderVectorField.cpp
// @author Generated by PSL

#include "ShaderVectorField.h"
REGISTER_PARTICLESTUFF(ShaderVectorField,"Shader:ShaderVectorField");

// default constructor
ShaderVectorField::ShaderVectorField(Particles *ps)
	: ParticleShader(ps, std::string("ShaderVectorField"))
{
	scaler = 1.0;
	drawStartPoints = 0.0;
	vf=NULL;
}

void ShaderVectorField::attachAttributes()
{
	// find the cluster mash
	attachAttribute(vf,std::string("VectorField"));

	ParticleShader::attachAttributes();
}

void ShaderVectorField::draw(int s)
{
	gmVector3 &low=vf->minCorner;
	gmVector3 &high=vf->maxCorner;
	gmVector3 &stepSize=vf->stepSize;

	// turn off the lighting
	glPushAttrib(GL_POINT_BIT);
	glDisable(GL_LIGHTING);
	for(double x=low[0];x<=high[0];x+=stepSize[0])
	for(double y=low[1];y<=high[1];y+=stepSize[1])
	for(double z=low[2];z<=high[2];z+=stepSize[2])
	{
		glBegin(GL_LINES);
		gmVector3 origin(x,y,z);
		gmVector3 grad=vf->getVector(origin);
		grad=grad*scaler+origin;
		glVertex3d(origin[0],origin[1],origin[2]);
		glVertex3d(grad[0],grad[1],grad[2]);
		glEnd();
		// a point as the orgin of
		if (drawStartPoints)
		{
			glPointSize(4);
			glBegin(GL_POINTS);
			glVertex3d(origin[0],origin[1],origin[2]);
			glEnd();
		}
	}
	glEnable(GL_LIGHTING);
	glPopAttrib();
}

int ShaderVectorField::qlen()
{
	return 2;
}

void ShaderVectorField::getq(double *q)
{
	q[0] = scaler;
	q[1] = drawStartPoints;
}

void ShaderVectorField::setq(double *q)
{
	scaler = q[0];
	drawStartPoints = q[1];
}

void ShaderVectorField::qname(char **qn)
{
	qn[0] = "scaler";
	qn[1] = "drawStartPoints";
}
